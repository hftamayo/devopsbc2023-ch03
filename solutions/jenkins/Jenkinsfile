/* groovylint-disable-next-line CompileStatic */
pipeline {
    agent any
    stages {
        stage('Clone Repository') {
            steps {
                echo 'Cloning the repository'
                git branch: 'main', url: 'https://github.com/hftamayo/devopsbc2023-ch03.git'
            }
        }

        stage('Database layer') {
            stages {
                stage('Deploy postgres') {
                    steps {
                        echo 'Deploying postgres'
                        sh '''
                            if [ -f "k8s/db/postgres_deployment.yaml" ]; then
                                kubectl apply -f k8s/db/postgres_deployment.yaml
                                if [ $? -eq 0 ]; then
                                    echo "Deployment applied successfully"
                                    if [ -f "k8s/db/postgres_service.yaml" ]; then
                                        kubectl apply -f k8s/db/postgres_service.yaml
                                        if [ $? -eq 0 ]; then
                                            echo "Service applied successfully"
                                        else
                                            echo "Failed to apply service"
                                            exit 1
                                        fi
                                    else
                                        echo "No service file found"
                                    fi
                                else
                                    echo "Failed to apply deployment"
                                    exit 1
                                fi
                            else
                                echo "No deployment file found"
                            fi
                        '''
                    }
                }
                stage('Deploy redis') {
                    steps {
                        echo 'Deploying redis'
                        sh '''
                            if [ -f "k8s/db/redis_deployment.yaml" ]; then
                                kubectl apply -f k8s/db/redis_deployment.yaml
                                if [ $? -eq 0 ]; then
                                    echo "Deployment applied successfully"
                                    if [ -f "k8s/db/redis_service.yaml" ]; then
                                        kubectl apply -f k8s/db/redis_service.yaml
                                        if [ $? -eq 0 ]; then
                                            echo "Service applied successfully"
                                        else
                                            echo "Failed to apply service"
                                            exit 1
                                        fi
                                    else
                                        echo "No service file found"
                                    fi
                                else
                                    echo "Failed to apply deployment"
                                    exit 1
                                fi
                            else
                                echo "No deployment file found"
                            fi
                        '''
                    }
                }
            }
        }

    //    stage('checking enviro conditions') {
    //         steps {
    //             script {
    //                 try {
    //                     sh 'id'
    //                     sh 'ls -l /var/run/docker.sock'
    //                     sh 'groups'
    //                     sh 'docker info'
    //                     echo 'Jenkins has the necessary permissions to interact with the Docker daemon.'
    //                 } catch (Exception e) {
    //                     error 'Jenkins does not have the necessary permissions to interact with the Docker daemon.'
    //                 }
    //             }
    //         }
    //     }

        stage('Worker dotnet microservice') {
            stages {
                stage('Check for tests') {    
                    steps {
                        dir('worker') {
                            script {
                                // Check if there are any test files
                                def hasTests = sh(script: 'ls Tests/*.csproj', returnStatus: true) == 0
                                // Save the result in a pipeline variable
                                env.HAS_TESTS = hasTests.toString()
                            }
                        }
                    }
                }

                stage('building worker docker container and running test routines') {
                    // Only run this stage if there are tests
                    when {
                        expression { env.HAS_TESTS == 'true' }
                    }
                    steps {
                        dir('worker') {
                            echo 'Changing to worker directory'
                            sh 'ls -l'
                            catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                                echo 'Building worker microservice docker image for testing'
                                sh 'docker buildx build --platform linux/amd64 -t ch03be_worker:test --target test --load .'
                                sh 'docker run --name worker_test -d ch03be_worker:test'
                                catchError(buildResult: 'SUCCESS', stageResult: 'SUCCESS') {
                                    echo 'Running worker microservice test routines'
                                    sh 'docker exec -i worker_test dotnet test'
                                }
                            }
                        }
                    }                            

                    post {
                        always {
                            echo 'Stopping and removing the worker microservice test container'
                            sh 'docker stop worker_test'
                            sh 'docker rm worker_test'
                        }
                        success {
                            echo 'Worker microservice test docker image built successfully'
                        }
                        failure {
                            echo 'Failed to build worker microservice test Docker image'
                        }
                    }

                }       

                stage('build worker microservice docker image for production') {
                    steps {
                        dir('worker'){
                            catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                                echo 'Building worker microservice docker image for production'
                                sh 'docker buildx build --platform linux/amd64 -t ch03be_worker:stable-0.0.1 --target production --load .'
                                sh "docker tag ch03be_worker:stable-0.0.1 hftamayo/ch03be_worker:stable-0.0.1"
                            }  
                        }
                    }                                              
                    post {
                        success {
                            echo 'Worker microservice production docker image built successfully'
                        }
                        failure {
                            echo 'Failed to build worker microservice production Docker image'
                        }
                    }

                }

                stage('Push worker microservice production image') {
                    steps {
                        echo 'Pushing stable worker microservice image'
                        withCredentials([usernamePassword(credentialsId: 'personalDockerHubCredentials', usernameVariable: 'JENKINS_DOCKER_HUB_USERNAME', passwordVariable: 'JENKINS_DOCKER_HUB_PASSWORD')]) {
                            sh '''
                                echo $JENKINS_DOCKER_HUB_PASSWORD | docker login -u $JENKINS_DOCKER_HUB_USERNAME --password-stdin
                                docker push hftamayo/ch03be_worker:stable-0.0.1
                            '''
                        }
                    }
                }

                stage('build worker microservice deployment and service to k8s cluster') {
                    steps {
                    	echo 'Deploying the worker microservice to the k8s cluster'
                        dir('solutions'){
                            sh '''
                            if [ -f "microservices/worker/microdotnet_deployment.yaml" ]; then
                                kubectl apply -f microservices/worker/microdotnet_deployment.yaml
                                if [ $? -eq 0 ]; then
                                    echo "Deployment applied successfully"
                                    if [ -f "microservices/worker/microdotnet_service.yaml" ]; then
                                        kubectl apply -f microservices/worker/microdotnet_service.yaml
                                        if [ $? -eq 0 ]; then
                                            echo "Service applied successfully"
                                        else
                                            echo "Failed to apply service"
                                            exit 1
                                        fi
                                    else
                                        echo "No service file found"
                                    fi
                                else
                                    echo "Failed to apply deployment"
                                    exit 1
                                fi
                            else
                                echo "No deployment file found"
                            fi			            
			            '''                            
		                }
		            }
		        }

            }
        }

        stage('Result nodejs microservice') {
            stages {
                stage('Check for tests') {    
                    steps {
                        dir('result') {
                            script {
                                // Check if there are any test files
                                def hasTests = sh(script: 'ls test/**', returnStatus: true) == 0
                                // Save the result in a pipeline variable
                                env.HAS_TESTS = hasTests.toString()
                            }
                        }
                    }
                }

                stage('building result docker container and running test routines') {
                    // Only run this stage if there are tests
                    when {
                        expression { env.HAS_TESTS == 'true' }
                    }
                    steps {
                        dir('result') {
                            echo 'Changing to result directory'
                            sh 'ls -l'
                            catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                                echo 'Building result microservice docker image for testing'
                                sh 'docker buildx build --platform linux/amd64 -t ch03be_result:test --target test --load .'
                                sh 'docker run --name result_test -d ch03be_result:test'
                                catchError(buildResult: 'SUCCESS', stageResult: 'SUCCESS') {
                                    echo 'Running result microservice test routines'
                                    sh 'docker exec -i result_test npm test'
                                }
                            }
                        }
                    }                            

                    post {
                        always {
                            echo 'Stopping and removing the result microservice test container'
                            sh 'docker stop result_test'
                            sh 'docker rm result_test'
                        }
                        success {
                            echo 'Result microservice test docker image built successfully'
                        }
                        failure {
                            echo 'Failed to build result microservice test Docker image'
                        }
                    }

                }       

                stage('build result microservice docker image for production') {
                    steps {
                        dir('result'){
                            catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                                echo 'Building result microservice docker image for production'
                                sh 'docker buildx build --platform linux/amd64 -t ch03be_result:stable-0.0.1 --target production --load .'
                                sh "docker tag ch03be_result:stable-0.0.1 hftamayo/ch03be_result:stable-0.0.1"
                            }  
                        }
                    }                                              
                    post {
                        success {
                            echo 'Result microservice production docker image built successfully'
                        }
                        failure {
                            echo 'Failed to build result microservice production Docker image'
                        }
                    }

                }

                stage('Push result microservice production image') {
                    steps {
                        echo 'Pushing stable result microservice image'
                        withCredentials([usernamePassword(credentialsId: 'personalDockerHubCredentials', usernameVariable: 'JENKINS_DOCKER_HUB_USERNAME', passwordVariable: 'JENKINS_DOCKER_HUB_PASSWORD')]) {
                            sh '''
                                echo $JENKINS_DOCKER_HUB_PASSWORD | docker login -u $JENKINS_DOCKER_HUB_USERNAME --password-stdin
                                docker push hftamayo/ch03be_result:stable-0.0.1
                            '''
                        }
                    }
                }

                stage('build result microservice deployment and service to k8s cluster') {
                    steps {
                    	echo 'Deploying the result microservice to the k8s cluster'
                        dir('solutions'){
                            sh '''
                            if [ -f "microservices/result/micronode_deployment.yaml" ]; then
                                kubectl apply -f microservices/result/micronode_deployment.yaml
                                if [ $? -eq 0 ]; then
                                    echo "Deployment applied successfully"
                                    if [ -f "microservices/result/micronode_service.yaml" ]; then
                                        kubectl apply -f microservices/result/micronode_service.yaml
                                        if [ $? -eq 0 ]; then
                                            echo "Service applied successfully"
                                        else
                                            echo "Failed to apply service"
                                            exit 1
                                        fi
                                    else
                                        echo "No service file found"
                                    fi
                                else
                                    echo "Failed to apply deployment"
                                    exit 1
                                fi
                            else
                                echo "No deployment file found"
                            fi			            
			            '''                            
		                }
		            }
		        }

            }
        }

        stage('Vote python microservice') {
            stages {
                stage('Check for tests') {    
                    steps {
                        dir('vote') {
                            script {
                                // Check if there are any test files
                                def hasTests = sh(script: 'ls test/**', returnStatus: true) == 0
                                // Save the result in a pipeline variable
                                env.HAS_TESTS = hasTests.toString()
                            }
                        }
                    }
                }

                stage('building vote docker container and running test routines') {
                    // Only run this stage if there are tests
                    when {
                        expression { env.HAS_TESTS == 'true' }
                    }
                    steps {
                        dir('vote') {
                            echo 'Changing to vote directory'
                            sh 'ls -l'
                            catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                                echo 'Building worker microservice docker image for testing'
                                sh 'docker buildx build --platform linux/amd64 -t ch03fe_vote:test --target test --load .'
                                sh 'docker run --name vote_test -d ch03fe_vote:test'
                                catchError(buildResult: 'SUCCESS', stageResult: 'SUCCESS') {
                                    echo 'Running vote microservice test routines'
                                    sh 'docker exec -i vote_test pytest'
                                }
                            }
                        }
                    }                            

                    post {
                        always {
                            echo 'Stopping and removing the vote microservice test container'
                            sh 'docker stop vote_test'
                            sh 'docker rm vote_test'
                        }
                        success {
                            echo 'Vote microservice test docker image built successfully'
                        }
                        failure {
                            echo 'Failed to build vote microservice test Docker image'
                        }
                    }

                }       

                stage('build vote microservice docker image for production') {
                    steps {
                        dir('vote'){
                            catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                                echo 'Building vote microservice docker image for production'
                                sh 'docker buildx build --platform linux/amd64 -t ch03fe_vote:stable-0.0.1 --target production --load .'
                                sh "docker tag ch03fe_vote:stable-0.0.1 hftamayo/ch03fe_vote:stable-0.0.1"
                            }  
                        }
                    }                                              
                    post {
                        success {
                            echo 'Vote microservice production docker image built successfully'
                        }
                        failure {
                            echo 'Failed to build vote microservice production Docker image'
                        }
                    }

                }

                stage('Push vote microservice production image') {
                    steps {
                        echo 'Pushing stable vote microservice image'
                        withCredentials([usernamePassword(credentialsId: 'personalDockerHubCredentials', usernameVariable: 'JENKINS_DOCKER_HUB_USERNAME', passwordVariable: 'JENKINS_DOCKER_HUB_PASSWORD')]) {
                            sh '''
                                echo $JENKINS_DOCKER_HUB_PASSWORD | docker login -u $JENKINS_DOCKER_HUB_USERNAME --password-stdin
                                docker push hftamayo/ch03fe_vote:stable-0.0.1
                            '''
                        }
                    }
                }

                stage('build vote microservice deployment and service to k8s cluster') {
                    steps {
                    	echo 'Deploying the vote microservice to the k8s cluster'
                        dir('solutions'){
                            sh '''
                            if [ -f "microservices/frontend/frontend_deployment.yaml" ]; then
                                kubectl apply -f microservices/frontend/frontend_deployment.yaml
                                if [ $? -eq 0 ]; then
                                    echo "Deployment applied successfully"
                                    if [ -f "microservices/frontend/frontend_service.yaml" ]; then
                                        kubectl apply -f microservices/frontend/frontend_service.yaml
                                        if [ $? -eq 0 ]; then
                                            echo "Service applied successfully"
                                        else
                                            echo "Failed to apply service"
                                            exit 1
                                        fi
                                    else
                                        echo "No service file found"
                                    fi
                                else
                                    echo "Failed to apply deployment"
                                    exit 1
                                fi
                            else
                                echo "No deployment file found"
                            fi			            
			            '''                            
		                }
		            }
		        }

            }
        }

    }
}
